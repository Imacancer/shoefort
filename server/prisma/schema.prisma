generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String
  role      Role      @default(customer)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  customer  Customer?
}

model Customer {
  id           String        @id @default(uuid())
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  services     Services[]
}

model Product {
  id           String        @id @default(uuid())
  product_name String
  status       Boolean       @default(true)
  featured     Boolean       @default(false)
  imgUrl       String?
  transactions Transaction[]
  variants     Variant[]
}

model Transaction {
  transactionId       String            @id @default(uuid())
  customerId          String
  productId           String
  amount              Int
  payment_method      PaymentMethod?
  trannsaction_status TransactionStatus @default(pending)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  customer            Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product             Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Variant {
  id        String         @id @default(uuid())
  productId String
  price     Int
  size      String
  category  Category?
  status    Boolean        @default(true)
  qty       Int
  colors    ColorVariant[]
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ColorVariant {
  id        String  @id @default(uuid())
  value     String
  variantId String
  status    Boolean @default(true)
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
}

model Services {
  id               String         @id @default(uuid())
  Name             String
  customerId       String
  email            String
  typeorService    typeorService?
  reservation_date DateTime
  message          String
  createdAt        DateTime       @default(now())
  customer         Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

enum Role {
  customer
  admin
}

enum PaymentMethod {
  creditCard
  cash
  gcash
}

enum TransactionStatus {
  pending
  completed
  cancelled
}

enum Category {
  Mens
  Womens
  Kids
}

enum typeorService {
  repair
  clean
}
